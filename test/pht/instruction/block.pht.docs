(category "block"
    (instr
        (long "body")
        (desc """
            Безымянный блок.
            Создаёт под-контекст и выполняет в нём выражения.
            """)
        (usage
            "(body expr0 exprN)"
            [["expr*"] "выражения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (body
                        (def [[i 12]])
                        (println i))
                    (body
                        (def [[i 21]])
                        (println i))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "named-block")
        (short "nblock")
        (desc """
            Именованный блок.
            Создаёт под-контекст и выполняет в нём выражения.
            """)
        (usage
            "(named-block name expr0 exprN)"
            [["name"] "имя."]
            [["expr*"] "выражения."])
        (usage
            "(nblock name expr0 exprN)"
            [["name"] "имя."]
            [["expr*"] "выражения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (named-block CycleBlock
                        (def [[i 0]])
                        (cycle (< i 10)
                            (if (> i 5)
                                (break CycleBlock))
                            (println i)
                            (++ i)))))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (app-fn
                    (def [[i 0]])
                    (named-block CycleBlock
                        (cycle (< i 10)
                            (++ i)
                            (if (< i 5)
                                (continue CycleBlock))
                            (println i)))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long "break")
        (desc "Переходит к началу именованного блока.")
        (usage
            "(break name)"
            [["name"] "имя блока."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (named-block CycleBlock
                        (def [[i 0]])
                        (cycle (< i 10)
                            (if (> i 5)
                                (break CycleBlock))
                            (println i)
                            (++ i)))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long "continue")
        (desc "Переходит к концу именованного блока.")
        (usage
            "(continue name)"
            [["name"] "имя блока."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (def [[i 0]])
                    (named-block CycleBlock
                        (cycle (< i 10)
                            (++ i)
                            (if (< i 5)
                                (continue CycleBlock))
                            (println i)))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long "catch")
        (desc """
            Безымянный блок ловли и обработки исключений.
            Создаёт под-контекст и выполняет выражения.
            """)
        (usage
            "(catch [[ex type cexpr] [ex type cexpr]] expr0 exprN)"
            [["ex"]    "исключение."]
            [["type"]  "тип исключения."]
            [["cexpr"] "выражение обрабтки исключения."]
            [["expr*"] "выражения."])
        (example
            """
            (use-ctx pht
                (import java [
                    [types [
                        java.lang.Exception
                        java.lang.RuntimeException]]])
                (app-fn
                    (catch [[_ ^RuntimeException    (println "Runtime Exception!")]
                            [_ ^Exception           (println "Exception!")]]
                        (throw (new ^Exception)))))
            """
            "Код работает на всех платформах!")))