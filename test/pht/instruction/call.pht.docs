(category "call"
    (instr
        (long  "ctor-call")
        (short "ccall")
        (desc  "Вызов конструктора предка.")
        (usage
            "(ctor-call arg0 argN)"
            [["arg*"] "аргументы."])
        (usage
            "(ccall arg0 argN)"
            [["arg*"] "аргументы."])
        (example
            """
            (use-ctx pht
                (cls Test [^Object]
                    (ctor [] (ccall)))
                (app-fn
                    (println (new ^Test))))
            """
            "Код работает на всех платформах!")
        (test
            "test/pht/jvm/ctor-a"
            "test/pht/jvm/ctor-b"))
    (instr
        (long  "method-call")
        (short "mcall")
        (desc  "Вызов метод.")
        (usage
            "(method-call type name arg0 argN)"
            [["type"] "тип."]
            [["name"] "имя."]
            [["arg*"] "аргументы."])
        (usage
            "(method-call instance name arg0 argN)"
            [["instance"] "объект."]
            [["name"]     "имя."]
            [["arg*"]     "аргументы."])
        (usage
            "(method-call . name arg0 argN)"
            [["name"] "имя."]
            [["arg*"] "аргументы."])
        (usage
            "(mcall type name arg0 argN)"
            [["type"] "тип."]
            [["name"] "имя."]
            [["arg*"] "аргументы."])
        (usage
            "(mcall instance name arg0 argN)"
            [["instance"] "объект."]
            [["name"]     "имя."]
            [["arg*"]     "аргументы."])
        (usage
            "(mcall . name arg0 argN)"
            [["name"] "имя."]
            [["arg*"] "аргументы."])
        (usage
            "(#name type arg0 argN)"
            [["type"] "тип."]
            [["name"] "имя."]
            [["arg*"] "аргументы."])
        (usage
            "(#name instance name arg0 argN)"
            [["instance"] "объект."]
            [["name"]     "имя."]
            [["arg*"]     "аргументы."])
        (usage
            "(#name . arg0 argN)"
            [["name"] "имя."]
            [["arg*"] "аргументы."])
        (example
            """
            (use-ctx pht
                (app
                    (defn foo ^void []
                        (println "Foo!"))
                    (app-fn
                        (mcall ^App foo))))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (app
                    (defn foo ^void []
                        (println "Foo!"))
                    (app-fn
                        (#foo ^App))))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (cls Test [^Object]
                    (ctor [] (ccall))
                    (defn foo ^void []
                        (println "Foo!")))
                (app-fn
                    (#foo (new ^Test))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "tailrec-call")
        (short "trcall")
        (desc  "Рекурсивный вызов текущей функции.")
        (usage
            "(tailrec-call arg0 argN)"
            [["arg*"] "аргументы."])
        (usage
            "(trcall arg0 argN)"
            [["arg*"] "аргументы."])
        (example
            """
            (use-ctx pht
                (app
                    (defn fac ^int [[i ^int][r ^int]]
                        (if (< i 1)
                            r
                            (trcall (- i 1) (* i r))))
                    (defn fac ^int [[i ^int]]
                        (#fac . i 1))
                    (app-fn
                        (println (#fac . 4)))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/trcall")))