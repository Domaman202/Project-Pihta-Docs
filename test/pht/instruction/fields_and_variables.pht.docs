(category "fields and variables"
    (instr
        (long  "define")
        (short "def")
        (desc  "Определение переменной или поля.")
        (usage
            "(define [[type name value] [type name value]])"
            [["type"]  "тип."]
            [["name"]  "имя."]
            [["value"] "значение."])
        (usage
            "(define [[name value] [name value]])"
            [["name"]  "имя."]
            [["value"] "значение."])
        (usage
            "(define [[name type] [name type]])"
            [["name"] "имя."]
            [["type"] "тип."])
        (usage
            "(def [[type name value] [type name value]])"
            [["type"]  "тип."]
            [["name"]  "имя."]
            [["value"] "значение."])
        (usage
            "(def [[name value] [name value]])"
            [["name"]  "имя."]
            [["value"] "значение."])
        (usage
            "(def [[name type] [name type]])"
            [["name"] "имя."]
            [["type"] "тип."])
        (example
            """
            (use-ctx pht
                (cls Test [^Object]
                    (def [[i ^int]])
                    (ctor [] (ccall)))
                (app-fn
                    (def [[o (new ^Test)]])
                    (set o/i 12)
                    (println o/i)))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (app-fn
                    (def [[^int i 21]])
                    (println i)))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (app-fn
                    (def [[^int i]])
                    (set i 33)
                    (println i)))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "field")
        (short "fld")
        (desc  "Определение поля, включая геттер и сеттер.")
        (usage
            "(field [[name type] [name type]])"
            [["name"] "имя."]
            [["type"] "тип."])
        (example
            """
            (use-ctx pht
                (cls Test [^Object]
                    (fld [[i ^int]])
                    (ctor [] (ccall)))
                (app-fn
                    (def [[o (new ^Test)]])
                    (set o/i 12)
                    (println o/i)))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "enum-field")
        (short "efld")
        (desc  "Определение поля и экземпляра перечисления.")
        (usage
            "(field [[name arg0 argN] [name arg0 argN]])"
            [["name"] "имя."]
            [["arg*"] "аргументы."])
        (example
            """
            (use-ctx pht
                (enum Colors [^Enum]
                    (ector [[r ^int] [g ^int] [b ^int]]
                        (set this/red r)
                        (set this/green g)
                        (set this/blue b))
                    (fld [
                        [red    ^int]
                        [green  ^int]
                        [blue   ^int]])
                    (efld [
                        [RED    255 0 0]
                        [GREEN  0 255 0]
                        [BLUE   0 0 255]]))
                (app-fn
                    (println ^Colors/RED)))
            """
            "Код работает на всех платформах!")))