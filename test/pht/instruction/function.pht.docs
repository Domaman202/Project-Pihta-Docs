(category "function"
    (instr
        (long  "def-ctor")
        (short "ctor")
        (desc  "Определение конструктора.")
        (usage
            "(def-ctor [[arg type] [arg type]] expr0 exprN)"
            [["arg"]   "имя аргумента."]
            [["type"]  "тип аргумента."]
            [["expr*"] "тело."])
        (usage
            "(ctor [[arg type] [arg type]] expr0 exprN)"
            [["arg"]   "имя аргумента."]
            [["type"]  "тип аргумента."]
            [["expr*"] "тело."])
        (example
            """
            (use-ctx pht
                (cls Test [^Object]
                    (ctor [[i ^int] [j ^double]]
                        (ccall)
                        (println i)
                        (println j)))
                (app-fn
                    (println (new ^Test 12 21.33))))
            """
            "Код работает на всех платформах!")
        (test
            "test/pht/jvm/ctor-a"
            "test/pht/jvm/ctor-b"))
    (instr
        (long  "def-enum-ctor")
        (short "ector")
        (desc  "Определение конструктора перечисления.")
        (usage
            "(def-enum-ctor [[arg type] [arg type]] expr0 exprN)"
            [["arg"]   "имя аргумента."]
            [["type"]  "тип аргумента."]
            [["expr*"] "тело."])
        (usage
            "(ector [[arg type] [arg type]] expr0 exprN)"
            [["arg"]   "имя аргумента."]
            [["type"]  "тип аргумента."]
            [["expr*"] "тело."])
        (example
            """
            (use-ctx pht
                (enum Colors [^Enum]
                    (ector [[r ^int] [g ^int] [b ^int]]
                        (set this/red r)
                        (set this/green g)
                        (set this/blue b))
                    (fld [
                        [red    ^int]
                        [green  ^int]
                        [blue   ^int]])
                    (efld [
                        [RED    255 0 0]
                        [GREEN  0 255 0]
                        [BLUE   0 0 255]]))
                (app-fn
                    (println ^Colors/RED)))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "def-func")
        (short "defn")
        (desc  "Определение метода.")
        (usage
            "(def-func name typeR [[arg typeA] [arg typeA]] expr0 exprN)"
            [["name"]  "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg"]   "имя аргумента."]
            [["typeA"] "тип аргумента."]
            [["expr*"] "тело."])
        (usage
            "(defn name typeR [[arg typeA] [arg typeA]] expr0 exprN)"
            [["name"]  "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg"]   "имя аргумента."]
            [["typeA"] "тип аргумента."]
            [["expr*"] "тело."])
        (example
            """
            (use-ctx pht
                (app
                    (defn foo ^void []
                        (println "Foo!"))
                    (app-fn
                        (#foo ^App))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/defn"))
    (instr
        (long  "def-ext-func")
        (short "efn")
        (desc  "Определение метода-расширения.")
        (usage
            "(def-ext-func typeE name typeR [[arg typeA] [arg typeA]] expr0 exprN)"
            [["typeE"] "расширяемый тип."]
            [["name"]  "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg"]   "имя аргумента."]
            [["typeA"] "тип аргумента."]
            [["expr*"] "тело."])
        (usage
            "(efn typeE name typeR [[arg typeA] [arg typeA]] expr0 exprN)"
            [["typeE"] "расширяемый тип."]
            [["name"]  "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg"]   "имя аргумента."]
            [["typeA"] "тип аргумента."]
            [["expr*"] "тело."])
        (example
            """
            (use-ctx pht
                (app
                    (efn ^String log ^void []
                        (println this))
                    (app-fn
                        (#log "Славься Русь!"))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/efn"))
    (instr
        (long  "to-ext-func")
        (short "to-efn")
        (desc  "Преобразовывает уже существующий метод в метод-расширение.")
        (usage
            "(to-ext-func typeD name [typeA0 typeAN])"
            [["typeD"]  "тип в котором определён метод."]
            [["name"]   "имя метода."]
            [["typeA*"] "тип аргумента."])
        (usage
            "(to-ext-func . name [type0 typeN])"
            [["name"]   "имя метода."]
            [["type*"] "тип аргумента."])
        (usage
            "(to-efn typeD name [typeA0 typeAN])"
            [["typeD"]  "тип в котором определён метод."]
            [["name"]   "имя метода."]
            [["typeA*"] "тип аргумента."])
        (usage
            "(to-efn . name [type0 typeN])"
            [["name"]   "имя метода."]
            [["type*"] "тип аргумента."])
        (example
            """
            (use-ctx pht
                (app
                    (defn foo ^void [[this ^String]]
                        (println this))
                    (to-efn . foo [^String])
                    (app-fn
                        (#foo "Слава России!"))))
            """)
        (test "test/pht/jvm/to-efn-a"))
    (instr
        (long  "def-gen-func")
        (short "gfn")
        (desc  "Определение автогенерируемого метода.")
        (usage
            "(def-gen-func name typeR [[arg typeA] [arg typeA]] expr0 exprN)"
            [["name"]  "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg"]   "имя аргумента."]
            [["typeA"] "тип аргумента."]
            [["expr*"] "тело."])
        (usage
            "(gfn name typeR [[arg typeA] [arg typeA]] expr0 exprN)"
            [["name"]  "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg"]   "имя аргумента."]
            [["typeA"] "тип аргумента."]
            [["expr*"] "тело."])
        (example
            """
            (use-ctx pht
                (cls TestA [^Object] (@static
                    (gfn foo ^auto [[a ^auto][b ^auto]]
                        (+ a b))))
                (app-fn
                    (println (#foo ^TestA 12 21))
                    (println (#foo ^TestA 12 21.12))
                    (println (#foo ^TestA 12.21 21))
                    (println (#foo ^TestA 12.21 21.12))
                    (println (#foo ^TestA "Слава " "России!"))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/gfn"))
    (instr
        (long  "lambda")
        (short "fn")
        (desc  "Создаёт безымянную функцию, возвращает ссылку на неё.")
        (usage
            "(lambda type [nameV0 nameVN] [nameA0 nameAN] expr0 exprN)"
            [["type"]   "тип ссылки."]
            [["nameV*"] "внешние переменные."]
            [["nameA*"] "аргументы."]
            [["expr*"]  "тело."])
        (usage
            "(lambda [nameV0 nameVN] [nameA0 nameAN] expr0 exprN)"
            [["type"]   "тип ссылки."]
            [["nameV*"] "внешние переменные."]
            [["nameA*"] "аргументы."]
            [["expr*"]  "тело."])
        (usage
            "(fn type [nameV0 nameVN] [nameA0 nameAN] expr0 exprN)"
            [["type"]   "тип ссылки."]
            [["nameV*"] "внешние переменные."]
            [["nameA*"] "аргументы."]
            [["expr*"]  "тело."])
        (usage
            "(fn [nameV0 nameVN] [nameA0 nameAN] expr0 exprN)"
            [["type"]   "тип ссылки."]
            [["nameV*"] "внешние переменные."]
            [["nameA*"] "аргументы."]
            [["expr*"]  "тело."])
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.lang.Runnable]]])
                (app
                    (defn test ^void [[o ^Runnable]]
                        (#run o))
                    (app-fn
                        (#test ^App (fn ^Runnable [][] (println "Арен брат, с днюхой!"))))))
            """
            "Код работает на @b{jvm} платформе!")
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.lang.Runnable]]])
                (app
                    (defn test ^void [[o ^Runnable]]
                        (#run o))
                    (app-fn
                        (#test ^App (fn [][] (println "Арен брат, с днюхой!"))))))
            """
            "Код работает на @b{jvm} платформе!")
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.lang.Runnable]]])
                (app
                    (defn test ^void [[o ^Runnable]]
                        (#run o))
                    (app-fn
                        (def [[i 12] [j 21]])
                        (#test ^App (fn ^Runnable [i j][] (println (+ i j)))))))
            """
            "Код работает на @b{jvm} платформе!")
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.lang.Runnable]]])
                (app
                    (defn test ^void [[o ^Runnable]]
                        (#run o))
                    (fld [[i ^int] [j ^int]])
                    (app-fn
                        (set i 12)
                        (set j 21)
                        (#test ^App (fn [i j][] (println (+ i j)))))))
            """
            "Код работает на @b{jvm} платформе!")
        (test
            "test/pht/jvm/lambda-a"
            "test/pht/jvm/lambda-b"))
    (instr
        (long  "ref-func")
        (short "rfn")
        (desc  "Возвращает ссылку на метод.")
        (usage
            "(ref-func type0 type1 name)"
            [["type0"] "тип ссылки."]
            [["type1"] "тип."]
            [["name"]  "имя."])
        (usage
            "(ref-func type0 instance name)"
            [["type0"]    "тип ссылки."]
            [["instance"] "объект."]
            [["name"]     "имя."])
        (usage
            "(ref-func . type name)"
            [["type"] "тип."]
            [["name"] "имя."])
        (usage
            "(ref-func . instance name)"
            [["instance"] "объект."]
            [["name"]     "имя."])
        (usage
            "(ref-func type . name)"
            [["type"] "тип ссылки."]
            [["name"] "имя."])
        (usage
            "(ref-func . . name)"
            [["name"] "имя."])
        (usage
            "(rfn type0 type1 name)"
            [["type0"] "тип ссылки."]
            [["type1"] "тип."]
            [["name"]  "имя."])
        (usage
            "(rfn type0 instance name)"
            [["type0"]    "тип ссылки."]
            [["instance"] "объект."]
            [["name"]     "имя."])
        (usage
            "(rfn . type name)"
            [["type"] "тип."]
            [["name"] "имя."])
        (usage
            "(rfn . instance name)"
            [["instance"] "объект."]
            [["name"]     "имя."])
        (usage
            "(rfn type . name)"
            [["type"] "тип ссылки."]
            [["name"] "имя."])
        (usage
            "(rfn . . name)"
            [["name"] "имя."])
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.util.function.Function]]])
                (cls Test [^Object] (@static
                    (defn foo ^String [[o ^String]] o)))
                (app-fn
                    (println (#apply (rfn ^Function ^Test foo) "Foo!"))))
            """
            "Код работает на @b{} платформе!")
        (example
            """
            (progn
                (import java
                    [[types [java.util.function.Function]]])
                (cls Test [^Object]
                    (ctor [] (ccall))
                    (defn foo ^String [[o ^String]] o))
                (app-fn
                    (println (#apply (rfn ^Function (new ^Test) foo) "Foo!"))))
            """
            "Код работает на @b{} платформе!")
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.util.function.Function]]])
                (cls Provider [^Object] (@static
                    (defn foo ^String [[o ^String]] o)))
                (cls Consumer [^Object] (@static
                    (defn test ^void [[f ^Function]]
                        (println (#apply f "Слава России!")))))
                (app-fn
                    (#test ^Consumer (rfn . ^Provider foo))))
            """
            "Код работает на @b{} платформе!")
        (example
            """
            (progn
                (import java [[types [java.lang.Runnable]]])
                (cls Test [^Object] (@static
                    (defn foo ^void []
                        (println "Foo!")))
                    (app-fn
                        (#run (rfn ^Runnable . foo)))))
            """
            "Код работает на @b{} платформе!")
        (example
            """
            (use-ctx pht
                (import java [[types [java.lang.Runnable]]])
                (cls Test [^Object] (@static
                    (defn foo ^void []
                        (println "Foo!"))
                    (defn run-runnable ^void [[runnable ^Runnable]]
                        (#run runnable)))
                    (app-fn
                        (#run-runnable . (rfn . . foo)))))
            """
            "Код работает на @b{} платформе!")
        (test
            "test/pht/jvm/ref-func-a"
            "test/pht/jvm/ref-func-b"
            "test/pht/jvm/ref-func-c"
            "test/pht/jvm/ref-func-d"))
    (instr
        (long  "app-func")
        (short "app-fn")
        (desc  "Определение функции приложения.")
        (usage
            "(app-func expr0 exprN)"
            [["expr*"] "тело."])
        (usage
            "(app-fn expr0 exprN)"
            [["expr*"] "тело."])
        (example
            """
            (use-ctx pht
                (app
                    (app-fn
                        (println "Слава России!"))))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (app-fn
                    (println "Слава Советскому Союзу!")))
            """
            "Код работает на всех платформах!")
        (test
            "test/pht/jvm/app-fn"
            "test/pht/jvm/app")))
