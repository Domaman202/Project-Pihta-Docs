(category "function"
    (instr
        (long  "def-ctor")
        (short "ctor")
        (desc  "Определение конструктора.")
        (usage
            "(def-ctor [[arg0 type0] [argN typeN]] expr0 exprN)"
            [["arg0" "argN"] "имя аргумента."]
            [["type0" "typeN"] "тип аргумента."]
            [["expr0" "exprN"] "тело."])
        (usage
            "(ctor [[arg0 type0] [argN typeN]] expr0 exprN)"
            [["arg0" "argN"] "имя аргумента."]
            [["type0" "typeN"] "тип аргумента."]
            [["expr0" "exprN"] "тело."])
        (example
            """
            (use-ctx pht
                (cls Test [^Object]
                    (ctor [[i ^int] [j ^double]]
                        (ccall)
                        (println i)
                        (println j)))
                (app-fn
                    (println (new ^Test 12 21.33))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "def-enum-ctor")
        (short "ector")
        (desc  "Определение конструктора перечисления.")
        (usage
            "(def-enum-ctor [[arg0 type0] [argN typeN]] expr0 exprN)"
            [["arg0" "argN"] "имя аргумента."]
            [["type0" "typeN"] "тип аргумента."]
            [["expr0" "exprN"] "тело."])
        (usage
            "(ector [[arg0 type0] [argN typeN]] expr0 exprN)"
            [["arg0" "argN"] "имя аргумента."]
            [["type0" "typeN"] "тип аргумента."]
            [["expr0" "exprN"] "тело."])
        (example
            """
            (use-ctx pht
                (enum Colors [^Enum]
                    (ector [[r ^int] [g ^int] [b ^int]]
                        (set this/red r)
                        (set this/green g)
                        (set this/blue b))
                    (fld [
                        [red    ^int]
                        [green  ^int]
                        [blue   ^int]])
                    (efld [
                        [RED    255 0 0]
                        [GREEN  0 255 0]
                        [BLUE   0 0 255]]))
                (app-fn
                    (println ^Colors/RED)))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "def-func")
        (short "defn")
        (desc  "Определение метода.")
        (usage
            "(def-func name typeR [[arg0 type0] [argN typeN]] expr0 exprN)"
            [["name"] "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg0" "argN"] "имя аргумента."]
            [["type0" "typeN"] "тип аргумента."]
            [["expr0" "exprN"] "тело."])
        (usage
            "(defn name typeR [[arg0 type0] [argN typeN]] expr0 exprN)"
            [["name"] "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg0" "argN"] "имя аргумента."]
            [["type0" "typeN"] "тип аргумента."]
            [["expr0" "exprN"] "тело."])
        (example
            """
            (use-ctx pht
                (app
                    (defn foo ^void []
                        (println "Foo!"))
                    (app-fn
                        (#foo ^App))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "def-ext-func")
        (short "efn")
        (desc  "Определение метода-расширения.")
        (usage
            "(def-ext-func typeE name typeR [[arg0 type0] [argN typeN]] expr0 exprN)"
            [["typeE"] "расширяемый тип."]
            [["name"] "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg0" "argN"] "имя аргумента."]
            [["type0" "typeN"] "тип аргумента."]
            [["expr0" "exprN"] "тело."])
        (usage
            "(efn typeE name typeR [[arg0 type0] [argN typeN]] expr0 exprN)"
            [["typeE"] "расширяемый тип."]
            [["name"] "имя."]
            [["typeR"] "возвращаемый тип."]
            [["arg0" "argN"] "имя аргумента."]
            [["type0" "typeN"] "тип аргумента."]
            [["expr0" "exprN"] "тело."])
        (example
            """
            (use-ctx pht
                (app
                    (efn ^String log ^void []
                        (println this))
                    (app-fn
                        (#log "Славься Русь!"))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "lambda")
        (short "fn")
        (desc  "Создаёт безымянную функцию, возвращает ссылку на неё.")
        (usage
            "(lambda type [nameV0 nameVN] [nameA0 nameAN] expr0 exprN)"
            [["type"] "тип ссылки."]
            [["nameV0" "nameVN"] "внешние переменные."]
            [["nameA0" "nameAN"] "аргументы."])
        (usage
            "(lambda [nameV0 nameVN] [nameA0 nameAN] expr0 exprN)"
            [["type"] "тип ссылки."]
            [["nameV0" "nameVN"] "внешние переменные."]
            [["nameA0" "nameAN"] "аргументы."])
        (usage
            "(fn type [nameV0 nameVN] [nameA0 nameAN] expr0 exprN)"
            [["type"] "тип ссылки."]
            [["nameV0" "nameVN"] "внешние переменные."]
            [["nameA0" "nameAN"] "аргументы."])
        (usage
            "(fn [nameV0 nameVN] [nameA0 nameAN] expr0 exprN)"
            [["type"] "тип ссылки."]
            [["nameV0" "nameVN"] "внешние переменные."]
            [["nameA0" "nameAN"] "аргументы."])
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.lang.Runnable]]])
                (app
                    (defn test ^void [[o ^Runnable]]
                        (#run o))
                    (app-fn
                        (#test ^App (fn ^Runnable [][] (println "Арен брат, с днюхой!"))))))
            """
            "Код работает на @b{jvm} платформе!")
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.lang.Runnable]]])
                (app
                    (defn test ^void [[o ^Runnable]]
                        (#run o))
                    (app-fn
                        (#test ^App (fn [][] (println "Арен брат, с днюхой!"))))))
            """
            "Код работает на @b{jvm} платформе!")
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.lang.Runnable]]])
                (app
                    (defn test ^void [[o ^Runnable]]
                        (#run o))
                    (app-fn
                        (def [[i 12] [j 21]])
                        (#test ^App (fn ^Runnable [i j][] (println (+ i j)))))))
            """
            "Код работает на @b{jvm} платформе!")
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.lang.Runnable]]])
                (app
                    (defn test ^void [[o ^Runnable]]
                        (#run o))
                    (fld [[i ^int] [j ^int]])
                    (app-fn
                        (set i 12)
                        (set j 21)
                        (#test ^App (fn [i j][] (println (+ i j)))))))
            """
            "Код работает на @b{jvm} платформе!"))
    (instr
        (long  "ref-func")
        (short "rfn")
        (desc  "Возвращает ссылку на метод.")
        (usage
            "(ref-func type0 type1 name)"
            [["type0"] "тип ссылки."]
            [["type1"] "тип."]
            [["name"]  "имя."])
        (usage
            "(ref-func type0 instance name)"
            [["type0"]    "тип ссылки."]
            [["instance"] "объект."]
            [["name"]     "имя."])
        (usage
            "(ref-func . type name)"
            [["type"] "тип."]
            [["name"] "имя."])
        (usage
            "(ref-func . instance name)"
            [["instance"] "объект."]
            [["name"]     "имя."])
        (usage
            "(ref-func type . name)"
            [["type"] "тип ссылки."]
            [["name"] "имя."])
        (usage
            "(ref-func . . name)"
            [["name"] "имя."])
        (usage
            "(rfn type0 type1 name)"
            [["type0"] "тип ссылки."]
            [["type1"] "тип."]
            [["name"]  "имя."])
        (usage
            "(rfn type0 instance name)"
            [["type0"]    "тип ссылки."]
            [["instance"] "объект."]
            [["name"]     "имя."])
        (usage
            "(rfn . type name)"
            [["type"] "тип."]
            [["name"] "имя."])
        (usage
            "(rfn . instance name)"
            [["instance"] "объект."]
            [["name"]     "имя."])
        (usage
            "(rfn type . name)"
            [["type"] "тип ссылки."]
            [["name"] "имя."])
        (usage
            "(rfn . . name)"
            [["name"] "имя."])
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.util.function.Function]]])
                (cls Test [^Object] (@static
                    (defn foo ^String [[o ^String]] o)))
                (app-fn
                    (println (#apply (rfn ^Function ^Test foo) "Foo!"))))
            """
            "Код работает на @b{} платформе!")
        (example
            """
            (progn
                (import java
                    [[types [java.util.function.Function]]])
                (cls Test [^Object]
                    (ctor [] (ccall))
                    (defn foo ^String [[o ^String]] o))
                (app-fn
                    (println (#apply (rfn ^Function (new ^Test) foo) "Foo!"))))
            """
            "Код работает на @b{} платформе!")
        (example
            """
            (use-ctx pht
                (import java
                    [[types [java.util.function.Function]]])
                (cls Provider [^Object] (@static
                    (defn foo ^String [[o ^String]] o)))
                (cls Consumer [^Object] (@static
                    (defn test ^void [[f ^Function]]
                        (println (#apply f "Слава России!")))))
                (app-fn
                    (#test ^Consumer (rfn . ^Provider foo))))
            """
            "Код работает на @b{} платформе!")
        (example
            """
            (progn
                (import java [[types [java.lang.Runnable]]])
                (cls Test [^Object] (@static
                    (defn foo ^void []
                        (println "Foo!")))
                    (app-fn
                        (#run (rfn ^Runnable . foo)))))
            """
            "Код работает на @b{} платформе!")
        (example
            """
            (use-ctx pht
                (import java [[types [java.lang.Runnable]]])
                (cls Test [^Object] (@static
                    (defn foo ^void []
                        (println "Foo!"))
                    (defn run-runnable ^void [[runnable ^Runnable]]
                        (#run runnable)))
                    (app-fn
                        (#run-runnable . (rfn . . foo)))))
            """
            "Код работает на @b{} платформе!")))