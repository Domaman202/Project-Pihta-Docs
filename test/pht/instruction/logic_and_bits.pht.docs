(category "logic and bits"
    (instr
        (long   "and")
        (symbol "&")
        (desc   "[@i{Логическая} | @i{Битовая}] операция @b{И} для @i{двух} значений.")
        (usage
            "(and argA argB)"
            [["arg*"] "значения."])
        (usage
            "(& argA argB)"
            [["arg*"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (and 3 2))))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (and true true))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/logic-bits"))
    (instr
        (long   "or")
        (symbol "|")
        (desc   "[@i{Логическая} | @i{Битовая}] операция @b{ИЛИ} для @i{двух} значений.")
        (usage
            "(or argA argB)"
            [["arg*"] "значения."])
        (usage
            "(| argA argB)"
            [["arg*"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (or 1 2))))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (or false true))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/logic-bits"))
    (instr
        (long "xor")
        (desc "[@i{Логическая} | @i{Битовая}] операция @b{ИСКЛ ИЛИ} для @i{двух} значений.")
        (usage
            "(xor argA argB)"
            [["arg*"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (xor 1 4))))
            """
            "Код работает на всех платформах!")
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (xor false false))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/logic-bits"))
    (instr
        (long   "not")
        (symbol "!")
        (desc   "[@i{Логическая} | @i{Битовая}] операция @b{НЕ} для @i{одного} значения.")
        (usage
            "(not arg)"
            [["arg"] "значение."])
        (usage
            "(! arg)"
            [["arg"] "значение."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (! false))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/logic-bits"))
    (instr
        (long   "shift-left")
        (symbol "<<")
        (desc   "Битовые сдвиг @i{одного} значения влево.")
        (usage
            "(shift-left value offset)"
            [["value"]  "значение."]
            [["offset"] "сдвиг."])
        (usage
            "(<< value offset)"
            [["value"]  "значение."]
            [["offset"] "сдвиг."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (<< 1 10))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/logic-bits"))
    (instr
        (long   "shift-right")
        (symbol ">>")
        (desc "Битовые сдвиг @i{одного} значения вправо.")
        (usage
            "(shift-right value offset)"
            [["value"]  "значение."]
            [["offset"] "сдвиг."])
        (usage
            "(>> value offset)"
            [["value"]  "значение."]
            [["offset"] "сдвиг."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (>> 1024 10))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/logic-bits")))