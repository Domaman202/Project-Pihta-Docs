(category "math"
    (instr
        (long   "add")
        (symbol "+")
        (desc   "Сложение @i{нескольких} значений.")
        (usage
            "(add arg0 argN)"
            [["arg0" "argN"] "значения."])
        (usage
            "(+ arg0 argN)"
            [["arg0" "argN"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (+ 6 3 3))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long   "sub")
        (symbol "-")
        (desc   "Вычитание @i{нескольких} значений.")
        (usage
            "(sub arg0 argN)"
            [["arg0" "argN"] "значения."])
        (usage
            "(- arg0 argN)"
            [["arg0" "argN"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (- 6 3 1))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long   "mul")
        (symbol "*")
        (desc   "Умножение @i{нескольких} значений.")
        (usage
            "(mul arg0 argN)"
            [["arg0" "argN"] "значения."])
        (usage
            "(* arg0 argN)"
            [["arg0" "argN"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (* 7 7 7))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long   "div")
        (symbol "/")
        (desc   "Деление @i{нескольких} значений.")
        (usage
            "(div arg0 argN)"
            [["arg0" "argN"] "значения."])
        (usage
            "(/ arg0 argN)"
            [["arg0" "argN"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (/ 6 2 3))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long   "rem")
        (symbol "%")
        (desc   "Взятие остатка от деления @i{нескольких} значений.")
        (usage
            "(rem arg0 argN)"
            [["arg0" "argN"] "значения."])
        (usage
            "(% arg0 argN)"
            [["arg0" "argN"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (% 3 2))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long "neg")
        (desc "Инверсия @i{одного} значения.")
        (usage
            "(neg arg)"
            [["arg"] "значение."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (neg 202))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long   "shift-left")
        (symbol "<<")
        (desc   "Битовые сдвиг @i{одного} значения влево.")
        (usage
            "(shift-left argA argB)"
            [["argA"] "значение."]
            [["argB"] "сдвиг."])
        (usage
            "(<< argA argB)"
            [["argA"] "значение."]
            [["argB"] "сдвиг."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (<< 1 10))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long   "shift-right")
        (symbol ">>")
        (desc "Битовые сдвиг @i{одного} значения вправо.")
        (usage
            "(shift-right argA argB)"
            [["argA"] "значение."]
            [["argB"] "сдвиг."])
        (usage
            "(>> argA argB)"
            [["argA"] "значение."]
            [["argB"] "сдвиг."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (>> 1024 10))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long   "increment-prefix")
        (short  "inc")
        (symbol "++")
        (desc   """
            Инкрементирует @b{одно} значение.
            @b{Сначала инкрементирует}, потом возвращает.
            """)
        (usage
            "(increment-prefix value)"
            [["value"] "значение."])
        (usage
            "(inc value)"
            [["value"] "значение."])
        (usage
            "(++ value)"
            [["value"] "значение."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (body (def [[i 0]]) (++  i)))
                    (println (body (def [[i 0]]) (inc i)))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "increment-postfix")
        (short "inc-")
        (desc  """
            Инкрементирует @b{одно} значение.
            @{Сначала возвращает}, потом инкрементирует.
            """)
        (usage
            "(increment-postfix value)"
            [["value"] "значение."])
        (usage
            "(inc- value)"
            [["value"] "значение."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (body (def [[i 0]]) (inc- i)))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long   "decrement-prefix")
        (short  "dec")
        (symbol "--")
        (desc   """
            Декрементирует @b{одно} значение.
            @b{Сначала декрементирует}, потом возвращает.
            """)
        (usage
            "(decrement-prefix value)"
            [["value"] "значение."])
        (usage
            "(dec value)"
            [["value"] "значение."])
        (usage
            "(-- value)"
            [["value"] "значение."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (body (def [[i 0]]) (--  i)))
                    (println (body (def [[i 0]]) (dec i)))))
            """
            "Код работает на всех платформах!"))
    (instr
        (long  "decrement-postfix")
        (short "dec-")
        (desc  """
            Декрементирует @b{одно} значение.
            @{Сначала возвращает}, потом декрементирует.
            """)
        (usage
            "(decrement-postfix value)"
            [["value"] "значение."])
        (usage
            "(dec- value)"
            [["value"] "значение."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (body (def [[i 0]]) (dec- i)))))
            """
            "Код работает на всех платформах!")))