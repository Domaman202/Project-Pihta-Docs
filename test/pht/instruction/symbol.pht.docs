(category "symbol"
    (instr
        (long "symbol")
        (desc "Собирает @b{символ} из @i{нескольких} значений во время компиляции.")
        (usage
            "(symbol arg0 argN)"
            [["arg*"] "значения."])
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (symbol "Привет, " "Русь!"))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/symbol"))
    (instr
        (long "lazy-symbol")
        (desc "Собирает @b{символ} из @i{нескольких} значений во время компиляции.")
        (usage
            "(lazy-symbol arg0 argN)"
            [["arg*"] "значения."])
        (example
            """
            (use-ctx pht
                (def-macro test []
                    (valn-repeat 10
                        (println (symbol (rand-symbol)))))
                (def-macro test-lazy []
                    (valn-repeat 10
                        (println (lazy-symbol (rand-symbol)))))
                (app-fn
                    (println "Простой:\n")
                    (test)
                    (println "\nЛенивый:\n")
                    (test-lazy)))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/lazy-symbol"))
    (instr
        (long  "rand-symbol")
        (desc  "Генерирует случайное неотрицательное число в виде @b{символа} во время компиляции.")
        (usage "(rand-symbol)")
        (example
            """
            (use-ctx pht
                (app-fn
                    (println (rand-symbol))))
            """
            "Код работает на всех платформах!")
        (test "test/pht/jvm/rand-symbol"))
    (instr
        (long "symbol-int")
        (desc "Преобразует @b{символ} в целое число.")
        (usage
            "(symbol-int symbol)"
            [["symbol"] "символ."])
        (test "test/pht/jvm/symbol-int")))